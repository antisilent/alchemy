{"version":3,"sources":["../src/alchemy.js"],"names":[],"mappings":"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","file":"src/alchemy.js","sourcesContent":["'use strict';\n\n/**\n * @author Konstantin Kitmanov <doctor.hogart@gmail.com>\n * @license MIT\n */\n\n\n/**\n * Iterates over all effects on given ingredient list\n * @param {Array.<Ingredient>} ingredients\n * @param {Function} iterator receives `effect` and `ingredient`\n */\nfunction iterateEffects (ingredients, iterator) {\n\tfor (let ingredient of ingredients) {\n\t\tfor (let [effect, index] of ingredient.effects) {\n\t\t\titerator(effect, index, ingredient);\n\t\t}\n\t}\n}\n\n/**\n * Class, representing particular ingredient\n * @param {String} name\n * @param {Array.<String>} effects\n */\nexport class Ingredient {\n\t/**\n\t * @param {String} name\n\t * @param {Array.<String>} effects\n\t */\n\tconstructor (name, effects) {\n\t\tthis.name = name;\n\t\tthis.effects = effects;\n\t}\n\n\t/**\n\t * Returns array of effects present both in this ingredient and `other`\n\t * @param {Ingredient} other\n\t * @return {Array.<String>}\n\t */\n\tgetSharedEffects (other) {\n\t\treturn this.effects.filter( (effect) => {\n\t\t\treturn other.hasEffect(effect);\n\t\t});\n\t}\n\n\t/**\n\t * Does this ingredient has given effect?\n\t * @param {String} effect\n\t * @return {Boolean}\n\t */\n\thasEffect (effect) {\n\t\treturn this.effects.indexOf(effect) > -1;\n\t}\n\n\t/**\n\t * Does this ingredient has any of desired effects?\n\t * @param {Array.<String>} effects\n\t * @return {boolean}\n\t */\n\thasSomeEffects (effects) {\n\t\treturn effects.some((eff) => {\n\t\t\treturn this.hasEffect(eff);\n\t\t});\n\t}\n}\n\n/**\n * Given ingredient list, return list of all possible potions\n * @param {Array.<Ingredient>} currentIngredients collection of ingredients\n */\nexport function getPossiblePotion (currentIngredients) {\n\tlet effects = {};\n\tlet potions = {};\n\n\titerateEffects(currentIngredients, (effect, ingredient) => {\n\t\tif (!effects[effect]) {\n\t\t\teffects[effect] = [];\n\t\t} else {\n\t\t\teffects[effect].push(ingredient);\n\n\t\t\tif (effects[effect].length === 1) {\n\t\t\t\tpotions[effect] = [ingredient]\n\t\t\t} else if (effects[effect].length > 1) {\n\t\t\t\tpotions[effect].push(ingredient);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Given ingredient list, determine which effect(s) potion would have\n * @param {Array.<Ingredient>} ingredients\n */\nexport function predictPotion (ingredients) {\n\tlet effects = {};\n\tlet resultingEffects = [];\n\n\titerateEffects(ingredients, (effect, ingredient) => {\n\t\tif (!effects[effect]) {\n\t\t\teffects[effect] = true;\n\t\t} else {\n\t\t\tresultingEffects.push(effect);\n\t\t}\n\t});\n\n\treturn resultingEffects;\n}\n\n/**\n * What potions can you make from this `givenIngredient` and other ingredients\n * @param {Ingredient} givenIngredient\n * @param {Array.<Ingredient>} ingredients overall ingredients list\n */\nexport function getSuitableIngredients (givenIngredient, ingredients) {\n\tlet suitableIngredients = [];\n\n\titerateEffects(ingredients, (effect, ingredient) => {\n\t\tif (ingredient.name !== givenIngredient.name) { // do not compare ingredient with itself\n\t\t\tif (givenIngredient.getSharedEffects(ingredient).length) {\n\t\t\t\tsuitableIngredients.push(ingredient);\n\t\t\t}\n\t\t}\n\t})\n}\n\n/**\n * Given desired effects, what possible ingredients do you need to make it?\n * @param {Array.<String>} desiredEffects\n * @param {Array.<Ingredient>} ingredients\n * @return {Array.<Ingredient>}\n */\nexport function getIngredientsForPotion (desiredEffects, ingredients) {\n\treturn ingredients.filter((/** @type {Ingredient} */ingredient) => {\n\t\treturn ingredient.hasSomeEffects(desiredEffects);\n\t})\n}"]}